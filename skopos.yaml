substitutions:
  device_name: akamatis-presence-sensor
  friendly_name: Akamatis Presence Sensor
  entity_name: ""
  tx_pin_ld2450: GPIO21
  rx_pin_ld2450: GPIO20

esphome:
  name: akamatis-presence-sensor
  friendly_name: Akamatis Presence Sensor
  comment: Akamatis Presence Sensor based on LD2450 + ESP32 C3 - Enhanced Version
  name_add_mac_suffix: True
  platformio_options:
    board_build.flash_mode: dio
  project: 
    name: Akamatis.HumanPresenceSensor
    version: "2.0"
  on_boot:
    - priority: -200
      then:
        lambda: |-
          id(zone1_target_exist).publish_state(false);
          id(zone2_target_exist).publish_state(false);
          id(zone3_target_exist).publish_state(false);
          id(zone_ex1_target_exist).publish_state(false);
          id(radar_status).publish_state("Initializing");
  includes:
    - zone.h
    - ld2450_processor.h
    
preferences:
    flash_write_interval: 5s

esp32:
  board: esp32-c3-devkitm-1

globals:
  - id: last_update_ld2450
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: init_zone_publish
    type: bool
    restore_value: no
    initial_value: "false"
  - id: update_counter
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: last_rate_calc
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: packet_error_count
    type: unsigned long
    restore_value: no
    initial_value: '0'

improv_serial:
  
logger:
  level: INFO

debug:
  update_interval: 30s

api:
    
ota:
  platform: esphome
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: NONE
  reboot_timeout: 10min
  ap:
    ssid: "${friendly_name} Hotspot"
    password: ""

captive_portal:

bluetooth_proxy:
  active: true

web_server:
  port: 80
  
text_sensor:
  - platform: version
    name: "Version"
  - platform: debug
    reset_reason:
      name: ${entity_name} ESP Reset Reason
      icon: mdi:anchor
      disabled_by_default: True
  - platform: wifi_info
    ip_address:
      name: ${entity_name} ESP IP Address
      entity_category: "diagnostic"
      disabled_by_default: True
      icon: mdi:ip-network
    mac_address:
      name: ${entity_name} ESP MAC
      entity_category: "diagnostic"
      icon: mdi:ip-network
      disabled_by_default: True
    
  # Enhanced Zone Info with Coordinates Display
  - platform: template
    name: ${entity_name} Zone1 Info
    id: tips_zone1_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Configure below" };
    update_interval: 1000s

  - platform: template
    name: ${entity_name} Zone1 Coordinates
    id: zone1_coords
    icon: mdi:map-marker-radius
    entity_category: diagnostic
    lambda: |-
      char buffer[100];
      sprintf(buffer, "X:%d Y:%d W:%d H:%d", 
        (int)id(zone1_x).state, 
        (int)id(zone1_y).state,
        (int)id(zone1_width).state, 
        (int)id(zone1_height).state);
      return {buffer};
    update_interval: 30s
    
  - platform: template
    name: ${entity_name} Zone2 Info
    id: tips_zone2_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Configure below" };
    update_interval: 1000s

  - platform: template
    name: ${entity_name} Zone2 Coordinates
    id: zone2_coords
    icon: mdi:map-marker-radius
    entity_category: diagnostic
    lambda: |-
      char buffer[100];
      sprintf(buffer, "X:%d Y:%d W:%d H:%d", 
        (int)id(zone2_x).state, 
        (int)id(zone2_y).state,
        (int)id(zone2_width).state, 
        (int)id(zone2_height).state);
      return {buffer};
    update_interval: 30s
    
  - platform: template
    name: ${entity_name} Zone3 Info
    id: tips_zone3_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Configure below" };
    update_interval: 1000s

  - platform: template
    name: ${entity_name} Zone3 Coordinates
    id: zone3_coords
    icon: mdi:map-marker-radius
    entity_category: diagnostic
    lambda: |-
      char buffer[100];
      sprintf(buffer, "X:%d Y:%d W:%d H:%d", 
        (int)id(zone3_x).state, 
        (int)id(zone3_y).state,
        (int)id(zone3_width).state, 
        (int)id(zone3_height).state);
      return {buffer};
    update_interval: 30s
    
  - platform: template
    name: ${entity_name} Zout1 Info
    id: tips_zone_ex1_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Zone Exclusion 1" };
    update_interval: 1000s
  - platform: template
    name: ${entity_name} Zout1 Coordinates
    id: zone_ex1_coords
    icon: mdi:map-marker-radius
    entity_category: diagnostic
    lambda: |-
      char buffer[100];
      sprintf(buffer, "X:%d Y:%d W:%d H:%d", 
        (int)id(zone_ex1_x).state, 
        (int)id(zone_ex1_y).state,
        (int)id(zone_ex1_width).state, 
        (int)id(zone_ex1_height).state);
      return {buffer};
    update_interval: 30s
    
  - platform: template
    name: ${entity_name} Any-Presence Info
    id: tips_any_presence_conf
    icon: mdi:information-outline
    entity_category: config
    lambda: |-
      return {"Any Presence Config" };
    update_interval: 1000s
    
  # Radar Status
  - platform: template
    name: ${entity_name} Radar Status
    id: radar_status
    icon: mdi:radar
    entity_category: diagnostic
    
  # Target Info
  - platform: template
    name: ${entity_name} Target1 Direction
    id: target1_direction
    icon: mdi:directions
  - platform: template
    name: ${entity_name} Target2 Direction
    id: target2_direction
    icon: mdi:directions
  - platform: template
    name: ${entity_name} Target3 Direction
    id: target3_direction
    icon: mdi:directions
  - platform: template
    name: ${entity_name} Target1 Position
    id: target1_position
    icon: mdi:directions
  - platform: template
    name: ${entity_name} Target2 Position
    id: target2_position
    icon: mdi:directions
  - platform: template
    name: ${entity_name} Target3 Position
    id: target3_position
    icon: mdi:directions

number:
  # System Configuration
  - platform: template
    name: ${entity_name} Update Interval
    id: update_interval_ms
    min_value: 100
    max_value: 2000
    initial_value: 1000
    step: 100
    unit_of_measurement: ms
    icon: mdi:timer-outline
    entity_category: config
    mode: box
    optimistic: True
    restore_value: True
    
  - platform: template
    name: ${entity_name} Position Threshold
    id: position_threshold
    min_value: 10
    max_value: 200
    initial_value: 50
    step: 10
    unit_of_measurement: mm
    icon: mdi:ruler
    entity_category: config
    mode: box
    optimistic: True
    restore_value: True
    
  - platform: template
    name: ${entity_name} Speed Threshold
    id: speed_threshold
    min_value: 0.01
    max_value: 1.0
    initial_value: 0.1
    step: 0.01
    unit_of_measurement: m/s
    icon: mdi:speedometer
    entity_category: config
    mode: slider
    optimistic: True
    restore_value: True
    
  - platform: template
    name: ${entity_name} Angle
    id: wall_angle
    min_value: 0
    max_value: 90
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: Â°
    icon: mdi:angle-acute
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True
    
  # Timeout Settings
  - platform: template
    name: ${entity_name} Any Presence Timeout
    id: any_presence_timeout
    min_value: 0
    max_value: 600
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: s
    icon: mdi:timer-off
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True
  - platform: template
    name: ${entity_name} Zone1 Timeout
    id: zone1_timeout
    min_value: 0
    max_value: 600
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: s
    icon: mdi:timer-off
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True

  - platform: template
    name: ${entity_name} Zone2 Timeout
    id: zone2_timeout
    min_value: 0
    max_value: 600
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: s
    icon: mdi:timer-off
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True

  - platform: template
    name: ${entity_name} Zone3 Timeout
    id: zone3_timeout
    min_value: 0
    max_value: 600
    mode: box
    device_class: duration
    entity_category: config
    unit_of_measurement: s
    icon: mdi:timer-off
    step: 1
    optimistic: True
    initial_value: 0
    restore_value: True
    
  # Zone 1 Configuration
  - platform: template
    name: ${entity_name} Zone1 X
    id: zone1_x
    min_value: -4000
    max_value: 4000
    mode: box
    device_class: distance
    entity_category: config
    unit_of_measurement: mm
    icon: mdi:arrow-left-bold
    step: 10
    optimistic: True
    initial_value: 0
    restore_value: True
    on_value: 
      then:
        - lambda: |-
            if (id(zone1_width).state > 0 && abs(id(zone1_x).state) + id(zone1_width).state > 4000) {
              ESP_LOGW("zone", "Zone1 exceeds X boundaries");
            }
            check_zone_valid(id(zone1_x).state, id(zone1_y).state, id(zone1_width).state, id(zone1_height).state, tips_zone1_conf);
  - platform: template
    name: ${entity_name} Zone1 Y
    id: zone1_y
    mode: box
    min_value: -500
    max_value: 8000
    device_class: distance
    entity_category: config
    icon: mdi:arrow-up-bold
    unit_of_measurement: mm
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: |-
            if (id(zone1_height).state > 0 && id(zone1_y).state + id(zone1_height).state > 8000) {
              ESP_LOGW("zone", "Zone1 exceeds Y boundaries");
            }
            check_zone_valid(id(zone1_x).state, id(zone1_y).state, id(zone1_width).state, id(zone1_height).state, tips_zone1_conf);
  - platform: template
    name: ${entity_name} Zone1 Height
    id: zone1_height
    icon: mdi:arrow-down-bold
    mode: box
    min_value: 0
    max_value: 8000
    initial_value: 0
    entity_category: config
    device_class: distance
    unit_of_measurement: mm
    step: 10
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zone_valid(id(zone1_x).state, id(zone1_y).state, id(zone1_width).state, id(zone1_height).state, tips_zone1_conf);
  - platform: template
    name: ${entity_name} Zone1 Width
    id: zone1_width
    mode: box
    min_value: 0
    max_value: 8000
    device_class: distance
    unit_of_measurement: mm
    entity_category: config
    icon: mdi:arrow-right-bold
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zone_valid(id(zone1_x).state, id(zone1_y).state, id(zone1_width).state, id(zone1_height).state, tips_zone1_conf);
    
  # Zone 2 Configuration
  - platform: template
    name: ${entity_name} Zone2 X
    id: zone2_x
    min_value: -4000
    max_value: 4000
    mode: box
    device_class: distance
    entity_category: config
    unit_of_measurement: mm
    icon: mdi:arrow-left-bold
    step: 10
    optimistic: True
    initial_value: 0
    restore_value: True
    on_value: 
      then:
        - lambda: |-
            if (id(zone2_width).state > 0 && abs(id(zone2_x).state) + id(zone2_width).state > 4000) {
              ESP_LOGW("zone", "Zone2 exceeds X boundaries");
            }
            check_zone_valid(id(zone2_x).state, id(zone2_y).state, id(zone2_width).state, id(zone2_height).state, tips_zone2_conf);
  - platform: template
    name: ${entity_name} Zone2 Y
    id: zone2_y
    mode: box
    min_value: -500
    max_value: 8000
    device_class: distance
    entity_category: config
    icon: mdi:arrow-up-bold
    unit_of_measurement: mm
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: |-
            if (id(zone2_height).state > 0 && id(zone2_y).state + id(zone2_height).state > 8000) {
              ESP_LOGW("zone", "Zone2 exceeds Y boundaries");
            }
            check_zone_valid(id(zone2_x).state, id(zone2_y).state, id(zone2_width).state, id(zone2_height).state, tips_zone2_conf);
  - platform: template
    name: ${entity_name} Zone2 Height
    id: zone2_height
    icon: mdi:arrow-down-bold
    mode: box
    min_value: 0
    max_value: 8000
    initial_value: 0
    entity_category: config
    device_class: distance
    unit_of_measurement: mm
    step: 10
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zone_valid(id(zone2_x).state, id(zone2_y).state, id(zone2_width).state, id(zone2_height).state, tips_zone2_conf);
  - platform: template
    name: ${entity_name} Zone2 Width
    id: zone2_width
    mode: box
    min_value: 0
    max_value: 8000
    device_class: distance
    unit_of_measurement: mm
    entity_category: config
    icon: mdi:arrow-right-bold
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zone_valid(id(zone2_x).state, id(zone2_y).state, id(zone2_width).state, id(zone2_height).state, tips_zone2_conf);
    
  # Zone 3 Configuration
  - platform: template
    name: ${entity_name} Zone3 X
    id: zone3_x
    min_value: -4000
    max_value: 4000
    mode: box
    device_class: distance
    entity_category: config
    unit_of_measurement: mm
    icon: mdi:arrow-left-bold
    step: 10
    optimistic: True
    initial_value: 0
    restore_value: True
    on_value: 
      then:
        - lambda: |-
            if (id(zone3_width).state > 0 && abs(id(zone3_x).state) + id(zone3_width).state > 4000) {
              ESP_LOGW("zone", "Zone3 exceeds X boundaries");
            }
            check_zone_valid(id(zone3_x).state, id(zone3_y).state, id(zone3_width).state, id(zone3_height).state, tips_zone3_conf);
  - platform: template
    name: ${entity_name} Zone3 Y
    id: zone3_y
    mode: box
    min_value: -500
    max_value: 8000
    device_class: distance
    entity_category: config
    icon: mdi:arrow-up-bold
    unit_of_measurement: mm
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: |-
            if (id(zone3_height).state > 0 && id(zone3_y).state + id(zone3_height).state > 8000) {
              ESP_LOGW("zone", "Zone3 exceeds Y boundaries");
            }
            check_zone_valid(id(zone3_x).state, id(zone3_y).state, id(zone3_width).state, id(zone3_height).state, tips_zone3_conf);
  - platform: template
    name: ${entity_name} Zone3 Height
    id: zone3_height
    icon: mdi:arrow-down-bold
    mode: box
    min_value: 0
    max_value: 8000
    initial_value: 0
    entity_category: config
    device_class: distance
    unit_of_measurement: mm
    step: 10
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zone_valid(id(zone3_x).state, id(zone3_y).state, id(zone3_width).state, id(zone3_height).state, tips_zone3_conf);
  - platform: template
    name: ${entity_name} Zone3 Width
    id: zone3_width
    mode: box
    min_value: 0
    max_value: 8000
    device_class: distance
    unit_of_measurement: mm
    entity_category: config
    icon: mdi:arrow-right-bold
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zone_valid(id(zone3_x).state, id(zone3_y).state, id(zone3_width).state, id(zone3_height).state, tips_zone3_conf);
    
  # Exclusion Zone 1 Configuration
  - platform: template
    name: ${entity_name} Zout1 X
    id: zone_ex1_x
    min_value: -4000
    max_value: 4000
    mode: box
    device_class: distance
    entity_category: config
    unit_of_measurement: mm
    icon: mdi:arrow-left-bold
    step: 10
    optimistic: True
    initial_value: 0
    restore_value: True
    on_value: 
      then:
        - lambda: check_zout_valid(1, tips_zone_ex1_conf);
  - platform: template
    name: ${entity_name} Zout1 Y
    id: zone_ex1_y
    mode: box
    min_value: -500
    max_value: 8000
    device_class: distance
    entity_category: config
    icon: mdi:arrow-up-bold
    unit_of_measurement: mm
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zout_valid(1, tips_zone_ex1_conf);
  - platform: template
    name: ${entity_name} Zout1 Height
    id: zone_ex1_height
    icon: mdi:arrow-down-bold
    mode: box
    min_value: 0
    max_value: 8000
    initial_value: 0
    entity_category: config
    device_class: distance
    unit_of_measurement: mm
    step: 10
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zout_valid(1, tips_zone_ex1_conf);
  - platform: template
    name: ${entity_name} Zout1 Width
    id: zone_ex1_width
    mode: box
    min_value: 0
    max_value: 8000
    device_class: distance
    unit_of_measurement: mm
    entity_category: config
    icon: mdi:arrow-right-bold
    step: 10
    initial_value: 0
    optimistic: True
    restore_value: True
    on_value: 
      then:
        - lambda: check_zout_valid(1, tips_zone_ex1_conf);

binary_sensor:
  - platform: status
    name: ${entity_name} Online
    id: ink_ha_connected
    
  # Presence Sensors
  - platform: template
    name: ${entity_name} Any Presence
    id: any_target_exist
    device_class: occupancy
    filters:
      - delayed_off: !lambda |-
          if (!id(init_zone_publish) || !id(zone_fn_enable).state) {
            return 0;
          };
          return id(any_presence_timeout).state * 1000.0;
  - platform: template
    name: ${entity_name} Zone1 Presence
    id: zone1_target_exist
    device_class: occupancy
    filters:
      - delayed_off: !lambda |-
          if (!id(init_zone_publish) || !id(zone_fn_enable).state) {
            return 0;
          }
          return id(zone1_timeout).state * 1000.0;
  - platform: template
    name: ${entity_name} Zone2 Presence
    id: zone2_target_exist
    device_class: occupancy
    filters:
      - delayed_off: !lambda |-
          if (!id(init_zone_publish) || !id(zone_fn_enable).state) {
            return 0;
          }
          return id(zone2_timeout).state * 1000.0;
  - platform: template
    name: ${entity_name} Zone3 Presence
    id: zone3_target_exist
    device_class: occupancy
    filters:
      - delayed_off: !lambda |-
          if (!id(init_zone_publish) || !id(zone_fn_enable).state) {
            return 0;
          }
          return id(zone3_timeout).state * 1000.0;
  - platform: template
    name: ${entity_name} Zout1 Presence
    id: zone_ex1_target_exist
    icon: mdi:account-multiple-remove
    device_class: occupancy
    
  # Timeout Active Indicators
  - platform: template
    name: ${entity_name} Zone1 Timeout Active
    id: zone1_timeout_active
    icon: mdi:timer-sand
    entity_category: diagnostic
    disabled_by_default: True
  - platform: template
    name: ${entity_name} Zone2 Timeout Active
    id: zone2_timeout_active
    icon: mdi:timer-sand
    entity_category: diagnostic
    disabled_by_default: True
  - platform: template
    name: ${entity_name} Zone3 Timeout Active
    id: zone3_timeout_active
    icon: mdi:timer-sand
    entity_category: diagnostic
    disabled_by_default: True

sensor:
  - platform: uptime
    name: ${entity_name} ESP Uptime
    id: sys_uptime
    update_interval: 60s
    disabled_by_default: True
  - platform: wifi_signal 
    name: ${entity_name} RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  
  # Radar Performance Metrics
  - platform: template
    name: ${entity_name} Update Rate
    id: update_rate
    unit_of_measurement: "Hz"
    accuracy_decimals: 1
    icon: mdi:pulse
    entity_category: diagnostic
    state_class: measurement
    filters:
      - throttle: 1s
    
  - platform: template
    name: ${entity_name} Packet Errors
    id: packet_errors
    accuracy_decimals: 0
    icon: mdi:alert-circle
    entity_category: diagnostic
    state_class: total_increasing
    filters:
      - throttle: 1s
    
  # Target Count Sensors
  - platform: template
    name: ${entity_name} All Target Counts
    id: all_target_count
    accuracy_decimals: 0
    icon: "mdi:counter"
    unit_of_measurement: "targets"
    state_class: measurement
    filters:
      - throttle: 1s
  - platform: template
    name: ${entity_name} Zone1 Target Counts
    id: zone1_target_count
    accuracy_decimals: 0
    icon: "mdi:counter"
    unit_of_measurement: "targets"
    state_class: measurement
    filters:
      - throttle: 1s
  - platform: template
    name: ${entity_name} Zone2 Target Counts
    id: zone2_target_count
    accuracy_decimals: 0
    icon: "mdi:counter"
    unit_of_measurement: "targets"
    state_class: measurement
    filters:
      - throttle: 1s
  - platform: template
    name: ${entity_name} Zone3 Target Counts
    id: zone3_target_count
    accuracy_decimals: 0
    icon: "mdi:counter"
    unit_of_measurement: "targets"
    state_class: measurement
    filters:
      - throttle: 1s
  - platform: template
    name: ${entity_name} Zout1 Target Counts
    id: zone_ex1_target_count
    accuracy_decimals: 0
    icon: mdi:account-multiple-minus-outline
    unit_of_measurement: "targets"
    state_class: measurement
    filters:
      - throttle: 1s

  # Target 1 Sensors
  - platform: template
    name: ${entity_name} Target1 X
    id: target1_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    icon: mdi:focus-field-horizontal
    device_class: distance
    filters:
    - throttle: 1s

  - platform: template
    name: ${entity_name} Target1 Y
    id: target1_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    icon: mdi:focus-field-vertical
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target1 Speed
    id: target1_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target1 Resolution
    id: target1_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target1 Angle
    id: target1_angle
    unit_of_measurement: 'Âº'
    accuracy_decimals: 1
    icon: mdi:angle-acute
    state_class: measurement
    filters:
      - throttle: 1s
  
  # Target 2 Sensors
  - platform: template
    name: ${entity_name} Target2 X
    id: target2_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    icon: mdi:focus-field-horizontal
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target2 Y
    id: target2_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    icon: mdi:focus-field-vertical
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target2 Speed
    id: target2_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target2 Resolution
    id: target2_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target2 Angle
    id: target2_angle
    accuracy_decimals: 1
    unit_of_measurement: 'Âº'
    icon: mdi:angle-acute
    state_class: measurement
    filters:
      - throttle: 1s

  # Target 3 Sensors
  - platform: template
    name: ${entity_name} Target3 X
    id: target3_x
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    icon: mdi:focus-field-horizontal
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target3 Y
    id: target3_y
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    icon: mdi:focus-field-vertical
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target3 Speed
    id: target3_speed
    accuracy_decimals: 2
    unit_of_measurement: 'm/s'
    state_class: measurement
    device_class: speed
    filters:
      - throttle: 1s

  - platform: template
    name: ${entity_name} Target3 Resolution
    id: target3_resolution
    accuracy_decimals: 0
    unit_of_measurement: 'mm'
    state_class: measurement
    device_class: distance
    filters:
      - throttle: 1s
      
  - platform: template
    name: ${entity_name} Target3 Angle
    id: target3_angle
    accuracy_decimals: 1
    unit_of_measurement: 'Âº'
    icon: mdi:angle-acute
    state_class: measurement
    filters:
      - throttle: 1s

switch:
  - platform: template
    name: ${entity_name} Target Enable
    id: target_fn_enable
    optimistic: True
    icon: mdi:target-variant
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: ${entity_name} Zone Enable
    id: zone_fn_enable
    optimistic: True
    icon: mdi:target-variant
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
  - platform: template
    name: ${entity_name} Zout1 Enable
    id: zone_ex1_enable
    optimistic: True
    icon: mdi:account-cancel
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: ${entity_name} Illuminance Fast-Update
    id: bh1750_fast_update
    optimistic: True
    entity_category: diagnostic
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:run-fast
    disabled_by_default: True
  - platform: template
    name: ${entity_name} Debug Mode
    id: debug_mode
    optimistic: True
    icon: mdi:bug
    entity_category: diagnostic
    restore_mode: RESTORE_DEFAULT_OFF
    disabled_by_default: True

button:
  - platform: restart
    icon: mdi:power-cycle
    name: ${entity_name} ESP Reboot
    entity_category: diagnostic

uart:
  id: uart_bus
  tx_pin: 
    number: ${tx_pin_ld2450}
    mode:
      input: true
      pullup: true
  rx_pin: 
    number: ${rx_pin_ld2450}
    mode:
      input: true
      pullup: true
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
  data_bits: 8
  debug:
    direction: BOTH
    dummy_receiver: True
    after:
      delimiter: [0X55, 0XCC]
    sequence:
      - lambda: |-
          static template_::TemplateNumber* zone_x[] = {id(zone1_x), id(zone2_x), id(zone3_x)};
          static template_::TemplateNumber* zone_y[] = {id(zone1_y), id(zone2_y), id(zone3_y)};
          static template_::TemplateNumber* zone_height[] = {id(zone1_height), id(zone2_height), id(zone3_height)};
          static template_::TemplateNumber* zone_width[] = {id(zone1_width), id(zone2_width), id(zone3_width)};
          static template_::TemplateSensor* zone_target_count[] = {id(zone1_target_count), id(zone2_target_count), id(zone3_target_count)};
          static template_::TemplateBinarySensor* zone_target_exist[] = {id(zone1_target_exist), id(zone2_target_exist), id(zone3_target_exist)};
          static template_::TemplateSwitch* zone_ex_enable[] = {id(zone_ex1_enable)};
          static template_::TemplateNumber* zone_ex_x[] = {id(zone_ex1_x)};
          static template_::TemplateNumber* zone_ex_y[] = {id(zone_ex1_y)};
          static template_::TemplateNumber* zone_ex_height[] = {id(zone_ex1_height)};
          static template_::TemplateNumber* zone_ex_width[] = {id(zone_ex1_width)};
          static template_::TemplateSensor* zone_ex_target_count[] = {id(zone_ex1_target_count)};
          static template_::TemplateBinarySensor* zone_ex_target_exist[] = {id(zone_ex1_target_exist)};
          static template_::TemplateSensor* target_angle[] = {id(target1_angle), id(target2_angle), id(target3_angle)};
          static template_::TemplateTextSensor* target_position[] = {id(target1_position), id(target2_position), id(target3_position)};
          static template_::TemplateTextSensor* target_direction[] = {id(target1_direction), id(target2_direction), id(target3_direction)};
          static template_::TemplateSensor* target_x[] = {id(target1_x), id(target2_x), id(target3_x)};
          static template_::TemplateSensor* target_y[] = {id(target1_y), id(target2_y), id(target3_y)};
          static template_::TemplateSensor* target_speed[] = {id(target1_speed), id(target2_speed), id(target3_speed)};
          static template_::TemplateSensor* target_resolution[] = {id(target1_resolution), id(target2_resolution), id(target3_resolution)};
          
          process_ld2450_data(
            bytes,
            id(last_update_ld2450),
            id(update_counter),
            id(last_rate_calc),
            id(packet_error_count),
            id(init_zone_publish),
            id(update_interval_ms),
            id(position_threshold),
            id(speed_threshold),
            id(wall_angle),
            id(update_rate),
            id(packet_errors),
            id(radar_status),
            id(zone_fn_enable),
            id(target_fn_enable),
            id(debug_mode),
            zone_x, zone_y, zone_height, zone_width, zone_target_count, zone_target_exist,
            zone_ex_enable, zone_ex_x, zone_ex_y, zone_ex_height, zone_ex_width, zone_ex_target_count, zone_ex_target_exist,
            target_angle, target_position, target_direction, target_x, target_y, target_speed, target_resolution,
            id(all_target_count),
            id(any_target_exist)
          );
